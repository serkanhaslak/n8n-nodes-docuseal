name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'node-modules'

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

      - name: TypeScript type checking
        run: npm run type-check

      - name: Validate package.json
        run: npm run validate

  # Unit Tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: ['16', '18', '20']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            junit.xml
          retention-days: 7

  # Integration Tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration
        env:
          # Add any required environment variables for integration tests
          NODE_ENV: test

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            coverage/
            junit.xml
          retention-days: 7

  # Build and Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Package for distribution
        run: npm pack

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            *.tgz
          retention-days: 30

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for known vulnerabilities
        run: npm run security:check
        continue-on-error: true

  # Dependency Check
  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        run: npm run deps:check
        continue-on-error: true

      - name: Analyze bundle size
        run: npm run analyze
        continue-on-error: true

  # Code Coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [test-unit, test-integration]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: unit-test-results-node-18
          path: coverage-unit/

      - name: Download integration test coverage
        uses: actions/download-artifact@v4
        with:
          name: integration-test-results
          path: coverage-integration/

      - name: Merge coverage reports
        run: npm run coverage:merge

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Release (only on main branch)
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build, test-unit, test-integration, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Create release
        run: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-integration, build, security]
    if: always()

    steps:
      - name: Notify success
        if: ${{ needs.lint.result == 'success' && needs.test-unit.result == 'success' && needs.test-integration.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success' }}
        run: echo "✅ All checks passed successfully!"

      - name: Notify failure
        if: ${{ needs.lint.result == 'failure' || needs.test-unit.result == 'failure' || needs.test-integration.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure' }}
        run: |
          echo "❌ Some checks failed:"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "Integration Tests: ${{ needs.test-integration.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Security: ${{ needs.security.result }}"
          exit 1
